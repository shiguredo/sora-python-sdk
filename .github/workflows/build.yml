name: build

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - feature/e2e-test
    paths-ignore:
      - "doc/**"
      - "**.md"
  # 毎日日本時間（JST）の14:00（UTCの5:00）に実行します。
  # ただし、週末は除きます。
  schedule:
    - cron: "0 5 * * 1-5"

jobs:
  # まず pyi を生成する
  # クロスコンパイル環境だと pyi が生成できないので、
  # １箇所で pyi を生成してアーティファクトにアップロードして、
  # それを各ビルドで利用する形にする。
  build_pyi:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo apt-get -y install libva-dev libdrm-dev
      - uses: eifinger/setup-rye@v3
        with:
          version: 'latest'
      - run: echo "$HOME/.rye/shims" >> $GITHUB_PATH
      - run: rye pin cpython@3.12
      - run: rye sync
      - name: Generate pyi
        run: |
          rye run python run.py ubuntu-22.04_x86_64
          mkdir sora_sdk/
          cp src/sora_sdk/py.typed sora_sdk/
          cp src/sora_sdk/sora_sdk_ext.pyi sora_sdk/
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sora_sdk
          path: sora_sdk/
  build_linux_macos:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: ubuntu-22.04_x86_64
            target: ubuntu-22.04_x86_64
            runs_on: ubuntu-22.04
            os: ubuntu
            auditwheel_plat: manylinux_2_35_x86_64
          - name: macos-13_arm64
            target: macos_arm64
            runs_on: macos-13
            os: macos
            python_host_platform: "macosx-13.0-arm64"
            archflags: "-arch arm64"
        python_version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
    needs: [build_pyi] 
    runs-on: ${{ matrix.platform.runs_on }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: sora_sdk
          path: sora_sdk/
      - run: |
          cp sora_sdk/py.typed src/sora_sdk/py.typed
          cp sora_sdk/sora_sdk_ext.pyi src/sora_sdk/sora_sdk_ext.pyi
      - run: |
          sudo apt-get update
          sudo apt-get -y install libva-dev libdrm-dev
        if: ${{ matrix.platform.os == 'ubuntu' }}
      - uses: eifinger/setup-rye@v3
        with:
          version: 'latest'
      - run: echo "$HOME/.rye/shims" >> $GITHUB_PATH
      - run: rye pin cpython@${{ matrix.python_version }}
      - run: rye sync

      # Ubuntu 向け
      - run: |
          rye run python run.py ${{ matrix.platform.target }}
          rye run python -m build
        if: ${{ matrix.platform.os == 'ubuntu' }}

      # macOS 向け
      - run: |
          rye run python run.py ${{ matrix.platform.target }}
          rye run python -m build
        if: ${{ matrix.platform.os == 'macos' }}
        env:
          _PYTHON_HOST_PLATFORM: ${{ matrix.platform.python_host_platform }}
          ARCHFLAGS: ${{ matrix.platform.archflags }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}_python-${{ matrix.python_version }}
          path: "dist/"

  build_windows:
    needs: [build_pyi] 
    runs-on: windows-2022
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        python_version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python_version }}"
          cache: "pip"
      - uses: actions/download-artifact@v4
        with:
          name: sora_sdk
          path: sora_sdk/
      - run: |
          cp sora_sdk/py.typed src/sora_sdk/py.typed
          cp sora_sdk/sora_sdk_ext.pyi src/sora_sdk/sora_sdk_ext.pyi
      - run: pip install -r requirements-dev.lock
      - run: python run.py windows_x86_64
      - run: python -m build

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-2019_python-${{ matrix.python_version }}
          path: dist/

  slack_notify_failed:
    needs: [build_linux_macos, build_windows]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: sora-python-sdk
          SLACK_COLOR: danger
          SLACK_ICON_EMOJI: ":japanese_ogre:"
          SLACK_TITLE: Build failed
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  publish_wheel:
    if: contains(github.ref, 'tags/202')
    needs:
      - build_linux_macos
      - build_windows
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: ubuntu-22.04_x86_64
          - name: macos-13_arm64
          - name: windows-2019
        python_version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.platform.name }}_python-${{ matrix.python_version }}
          path: dist
      - run: |
          if [ -e dist/*.tar.gz ]; then
            mv dist/*.tar.gz ./
          fi
      # matrix の中で１個だけソースディストリビューション用のデータを残しておく
      - run: mv *.tar.gz dist/
        if: ${{ matrix.platform.name == 'macos-13_arm64' && matrix.python_version == '3.9' }}

      # テスト用
      # - name: Publish package to TestPyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
      #     repository-url: https://test.pypi.org/legacy/
      #     verbose: true

      # 本番用
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: sora-python-sdk
          SLACK_COLOR: danger
          SLACK_TITLE: Build failed
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  create-release:
    if: contains(github.ref, 'tags/202')
    needs:
      - build_linux_macos
      - build_windows
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/download
        with: { "platform": "ubuntu-22.04_x86_64", "python_version": "3.9" }
      - uses: ./.github/actions/download
        with: { "platform": "ubuntu-22.04_x86_64", "python_version": "3.10" }
      - uses: ./.github/actions/download
        with: { "platform": "ubuntu-22.04_x86_64", "python_version": "3.11" }
      - uses: ./.github/actions/download
        with: { "platform": "ubuntu-22.04_x86_64", "python_version": "3.12" }
      - uses: ./.github/actions/download
        with: { "platform": "macos-13_arm64", "python_version": "3.9" }
      - uses: ./.github/actions/download
        with: { "platform": "macos-13_arm64", "python_version": "3.10" }
      - uses: ./.github/actions/download
        with: { "platform": "macos-13_arm64", "python_version": "3.11" }
      - uses: ./.github/actions/download
        with: { "platform": "macos-13_arm64", "python_version": "3.12" }
      - uses: ./.github/actions/download
        with: { "platform": "windows-2019", "python_version": "3.9" }
      - uses: ./.github/actions/download
        with: { "platform": "windows-2019", "python_version": "3.10" }
      - uses: ./.github/actions/download
        with: { "platform": "windows-2019", "python_version": "3.11" }
      - uses: ./.github/actions/download
        with: { "platform": "windows-2019", "python_version": "3.12" }
      - name: Env to output
        run: |
          echo "package_paths<<EOF" >> $GITHUB_OUTPUT
          cat package_paths.env >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        id: env
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.env.outputs.package_paths }}
          prerelease: ${{ contains(github.ref, 'dev') }}
      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: sora-python-sdk
          SLACK_COLOR: danger
          SLACK_ICON_EMOJI: ":japanese_ogre:"
          SLACK_TITLE: Release failed
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
